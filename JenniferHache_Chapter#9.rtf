{\rtf1\ansi\ansicpg1252\cocoartf2818
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww31800\viewh17440\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
 Jennifer Hachec\
\
 Date Created:\
 \
 October 29 2024\
\
\
 Program Description:\
\
\
 banking system using a  BankAcc  class, which allows users to manage their bank accounts. Will display \
 name, account number, amount and interest rate.\
\
  \
\
 Functions used in the Program ( in order as they are called): \
\
\
 1.  \
   __init__(self, acct_name, acct_num, initial_balance)\
\
 Description:\
bank account with the account holder's name, account number, and initial balance.\
\
Parameters: strings and float\
 	\
  acct_name: Name of the account holder. 	\
  acct_num: Account number. 	\
  initial_balance: Starting balance of the account (float).\
	\
 \
  Variables\
	\
  self.acct_name: Stores the account holder's name.\
 	\
  self.acct_num: Stores the account number.\
  self.balance: Stores the account balance.\
  	\
  Logical Steps:\
	\
  Assign input parameters to instance variables\
 \
  Return\
 : None \
\
   2. deposit(self)\
\
	\
  Description\
 : Allows the user to deposit money into the bank account.\
	\
  Parameters\
 : None (due to input)\
	\
  Variables\
	\
  amount: The amount the user wishes to deposit (float).\
	\
  Logical Steps\
	\
  Ask user to enter a deposit amount.\
	\
  Convert input to float and check if it'92s a positive numerical value\
	\
  If valid, add the amount to the balance and print confirmation.\
	\
  If invalid, print an error message - will ask user to enter numerical value.\
\
  Return\
 None.\
\
\
   3. withdraw(self)\
\
  Description\
 : Allows the user to withdraw money from the bank account.\
\
	\
  Parameters\
 : None (due to input).\
	\
  Variables\
 : a float\
	\
  amount: The amount the user wishes to withdraw.\
\
	\
  Logical Steps\
	\
  Prompt the user to enter a withdrawal amount.\
	\
  Convert input to float and check if positive.\
	\
  Check if sufficient balance exists.\
	\
  If valid, subtract the amount from the balance and print confirmation.\
	\
  If insufficient funds or not a numerical value, error message will print\
	\
  Return\
  	None\
\
\
 4. add_interest(self, interest_rate)\
\
  Description\
  Adds interest to the account balance. With interest rate. \
 	\
  Parameters\
 : float	\
  interest_rate: Interest rate to be applied.\
\
  Variables\
	\
  interest: The calculated interest amount.\
 	\
  Logical Steps\
 :\
	\
  Check if the interest rate is positive.\
	\
  Calculate interest based on the current balance.\
	\
  Add the interest to the balance and print confirmation.\
	\
  If invalid, print an error message.\
 	\
  Return\
 : None.\
\
 5. acct_info(self)\
\
  Description\
 : Returns a string containing the account info.\
	\
  Parameters\
 : None.\
	\
  Variables\
 : None.\
	\
  Logical Steps\
	\
  Create a string with account details (name, balance, number).\
 	\
  Return\
 : string with account information.\
\
 \
6. display(self)\
\
  Description\
 : Displays the current available balance that is in the account\
	\
  Parameters\
 : None.\
	\
  Variables\
 : None.\
	\
  Logical Steps\
 	\
  Print the current balance.\
\
  Return\
 : None.\
\
\
 7. __str__(self)\
\
  Description\
 : Provides a string of the bank account.\
 	\
  Parameters\
 : None.\
	\
  Variables\
 : None.\
	\
  Logical Steps\
 Create a formatted string with account name, number, and current balance.\
\
  Return\
 : Formatted string representing the account.\
\
\
https://github.com/Jhache06/JenniferHache_Chapter-9_A.git\
}